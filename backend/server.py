from fastapi import FastAPI, APIRouter, HTTPException
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional
import uuid
from datetime import datetime
import httpx
import asyncio

ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# Telegram configuration
BOT_TOKEN = os.environ.get('BOT_TOKEN')
OWNER_CHAT_ID = os.environ.get('OWNER_CHAT_ID')
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# Create the main app without a prefix
app = FastAPI()

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")

# Models
class Product(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    description: str
    short_description: str
    price: float
    image_url: str
    specifications: dict = Field(default_factory=dict)
    created_at: datetime = Field(default_factory=datetime.utcnow)

class ProductCreate(BaseModel):
    name: str
    description: str
    short_description: str
    price: float
    image_url: str
    specifications: dict = Field(default_factory=dict)

class CartItem(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    product_id: str
    product_name: str
    price: float
    quantity: int
    created_at: datetime = Field(default_factory=datetime.utcnow)

class CartItemCreate(BaseModel):
    product_id: str
    quantity: int = 1

class FeedbackForm(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    phone: str
    message: str
    created_at: datetime = Field(default_factory=datetime.utcnow)

class FeedbackFormCreate(BaseModel):
    name: str
    phone: str
    message: str

class Project(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    description: str
    address: str
    images: List[str]
    created_at: datetime = Field(default_factory=datetime.utcnow)

class Order(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    items: List[CartItem]
    total_amount: float
    created_at: datetime = Field(default_factory=datetime.utcnow)
    status: str = "pending"

class OrderCreate(BaseModel):
    items: List[CartItem]

# Telegram helper functions
async def send_telegram_message(message: str):
    """Send message to owner via Telegram bot"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{TELEGRAM_API_URL}/sendMessage",
                json={
                    "chat_id": OWNER_CHAT_ID,
                    "text": message,
                    "parse_mode": "HTML"
                }
            )
            return response.json()
    except Exception as e:
        logging.error(f"Failed to send Telegram message: {e}")
        return None

# API Routes
@api_router.get("/")
async def root():
    return {"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤!"}

# Products endpoints
@api_router.get("/products", response_model=List[Product])
async def get_products():
    products = await db.products.find().to_list(1000)
    return [Product(**product) for product in products]

@api_router.get("/products/{product_id}", response_model=Product)
async def get_product(product_id: str):
    product = await db.products.find_one({"id": product_id})
    if not product:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return Product(**product)

@api_router.post("/products", response_model=Product)
async def create_product(product_data: ProductCreate):
    product = Product(**product_data.dict())
    await db.products.insert_one(product.dict())
    return product

# Cart endpoints
@api_router.post("/cart", response_model=CartItem)
async def add_to_cart(cart_item_data: CartItemCreate):
    # Get product details
    product = await db.products.find_one({"id": cart_item_data.product_id})
    if not product:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    cart_item = CartItem(
        product_id=cart_item_data.product_id,
        product_name=product["name"],
        price=product["price"],
        quantity=cart_item_data.quantity
    )
    await db.cart_items.insert_one(cart_item.dict())
    return cart_item

@api_router.get("/cart", response_model=List[CartItem])
async def get_cart():
    cart_items = await db.cart_items.find().to_list(1000)
    return [CartItem(**item) for item in cart_items]

@api_router.delete("/cart/{item_id}")
async def remove_from_cart(item_id: str):
    result = await db.cart_items.delete_one({"id": item_id})
    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {"message": "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"}

@api_router.delete("/cart")
async def clear_cart():
    await db.cart_items.delete_many({})
    return {"message": "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞"}

# Feedback endpoints
@api_router.post("/feedback")
async def submit_feedback(feedback_data: FeedbackFormCreate):
    feedback = FeedbackForm(**feedback_data.dict())
    await db.feedback.insert_one(feedback.dict())
    
    # Send to Telegram
    message = f"""
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</b>

üë§ <b>–ò–º—è:</b> {feedback.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {feedback.phone}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {feedback.message}

üïê <b>–í—Ä–µ–º—è:</b> {feedback.created_at.strftime('%d.%m.%Y %H:%M')}
"""
    
    await send_telegram_message(message)
    return {"message": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."}

# Orders endpoints  
@api_router.post("/orders")
async def create_order(order_data: OrderCreate):
    total_amount = sum(item.price * item.quantity for item in order_data.items)
    order = Order(items=order_data.items, total_amount=total_amount)
    await db.orders.insert_one(order.dict())
    
    # Send order to Telegram
    items_text = "\n".join([
        f"‚Ä¢ {item.product_name} - {item.quantity} —à—Ç. √ó {item.price:,.0f} ‚ÇΩ = {item.price * item.quantity:,.0f} ‚ÇΩ"
        for item in order.items
    ])
    
    message = f"""
üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id[:8]}</b>

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
{items_text}

üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_amount:,.0f} ‚ÇΩ

üïê <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}
"""
    
    await send_telegram_message(message)
    
    # Clear cart after order
    await db.cart_items.delete_many({})
    
    return {"message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."}

# Projects endpoints
@api_router.get("/projects", response_model=List[Project])
async def get_projects():
    projects = await db.projects.find().to_list(1000)
    return [Project(**project) for project in projects]

@api_router.post("/projects", response_model=Project)
async def create_project(project_data: Project):
    await db.projects.insert_one(project_data.dict())
    return project_data

# Initialize sample data
@api_router.post("/init-data")
async def init_sample_data():
    # Clear existing data
    await db.products.delete_many({})
    await db.projects.delete_many({})
    
    # Sample products
    products = [
        {
            "name": "Mitsubishi Electric MSZ-AP35VG",
            "short_description": "–ò–Ω–≤–µ—Ä—Ç–æ—Ä–Ω–∞—è —Å–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º–∞ —Å Wi-Fi —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º",
            "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω–≤–µ—Ä—Ç–æ—Ä–Ω–∞—è —Å–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º–∞ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π 3D i-see Sensor –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞. –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å A+++, –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞, —Ä–µ–∂–∏–º –æ–±–æ–≥—Ä–µ–≤–∞ –¥–æ -25¬∞C.",
            "price": 45000,
            "image_url": "https://images.pexels.com/photos/3964537/pexels-photo-3964537.jpeg",
            "specifications": {
                "–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è": "3.5 –∫–í—Ç",
                "–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è": "35 –º¬≤",
                "–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ": "1.2 –∫–í—Ç",
                "–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞": "19 –¥–ë",
                "–ö–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "A+++"
            }
        },
        {
            "name": "Daikin FTXM35R",
            "short_description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤–æ–∑–¥—É—Ö–∞",
            "description": "–í—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–∞—è —Å–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ Flash Streamer. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–æ–æ—á–∏—Å—Ç–∫–∏, —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏ –Ω–∏–∑–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö –¥–æ -25¬∞C.",
            "price": 52000,
            "image_url": "https://images.pexels.com/photos/3964341/pexels-photo-3964341.jpeg",
            "specifications": {
                "–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è": "3.5 –∫–í—Ç",
                "–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è": "35 –º¬≤",
                "–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ": "1.1 –∫–í—Ç",
                "–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞": "20 –¥–ë",
                "–ö–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "A+++"
            }
        },
        {
            "name": "LG Dual Cool AP09RT",
            "short_description": "–î–≤–æ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è —Å —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º",
            "description": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è Dual Cool –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞. –ò–Ω–≤–µ—Ä—Ç–æ—Ä–Ω—ã–π –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä, Wi-Fi –º–æ–¥—É–ª—å, —Ä–µ–∂–∏–º —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.",
            "price": 38000,
            "image_url": "https://images.unsplash.com/photo-1709432767122-d3cb5326911a",
            "specifications": {
                "–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è": "2.6 –∫–í—Ç",
                "–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è": "26 –º¬≤",
                "–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ": "0.9 –∫–í—Ç",
                "–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞": "18 –¥–ë",
                "–ö–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "A+++"
            }
        },
        {
            "name": "Samsung AR12TXHZAWK",
            "short_description": "Smart –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º",
            "description": "–£–º–Ω—ã–π –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–º–∞—Ä—Ç—Ñ–æ–Ω. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è WindFree –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –±–µ–∑ —Å–∫–≤–æ–∑–Ω—è–∫–æ–≤, —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.",
            "price": 41000,
            "image_url": "https://images.pexels.com/photos/32588555/pexels-photo-32588555.jpeg",
            "specifications": {
                "–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è": "3.5 –∫–í—Ç",
                "–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è": "35 –º¬≤",
                "–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ": "1.15 –∫–í—Ç",
                "–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞": "17 –¥–ë",
                "–ö–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "A+++"
            }
        },
        {
            "name": "Panasonic CS-TZ25WKEW",
            "short_description": "–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π",
            "description": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π. –ë—ã—Å—Ç—Ä–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ, —Ç–∏—Ö–∞—è —Ä–∞–±–æ—Ç–∞, —Ä–µ–∂–∏–º –æ—Å—É—à–µ–Ω–∏—è, —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ.",
            "price": 32000,
            "image_url": "https://images.pexels.com/photos/7937300/pexels-photo-7937300.jpeg",
            "specifications": {
                "–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è": "2.5 –∫–í—Ç",
                "–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è": "25 –º¬≤",
                "–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ": "0.8 –∫–í—Ç", 
                "–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞": "21 –¥–ë",
                "–ö–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "A++"
            }
        },
        {
            "name": "Haier AS18NS4ERA",
            "short_description": "–ù–∞—Å—Ç–µ–Ω–Ω–∞—è —Å–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º–∞ —Å —Å–∞–º–æ–æ—á–∏—Å—Ç–∫–æ–π",
            "description": "–ù–∞–¥–µ–∂–Ω–∞—è —Å–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Å–∞–º–æ–æ—á–∏—Å—Ç–∫–∏ –∏ –∏–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–¥—É—Ö–∞. –ò–Ω–≤–µ—Ä—Ç–æ—Ä–Ω—ã–π –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä, —Ä–µ–∂–∏–º '–Ø –¥–æ–º–∞/–ú–µ–Ω—è –Ω–µ—Ç', –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–∞–¥–æ–≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è.",
            "price": 29000,
            "image_url": "https://images.unsplash.com/photo-1727797208736-6efdc1088f81",
            "specifications": {
                "–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è": "5.0 –∫–í—Ç",
                "–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è": "50 –º¬≤",
                "–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ": "1.8 –∫–í—Ç",
                "–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞": "24 –¥–ë",
                "–ö–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "A++"
            }
        }
    ]
    
    for product_data in products:
        product = Product(**product_data)
        await db.products.insert_one(product.dict())
    
    # Sample projects
    projects = [
        {
            "title": "–ú–æ–Ω—Ç–∞–∂ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ñ–∏—Å–µ",
            "description": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º—É–ª—å—Ç–∏-–∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ—Ñ–∏—Å–Ω–æ–º –∑–¥–∞–Ω–∏–∏ –ø–ª–æ—â–∞–¥—å—é 500 –º¬≤. –í–∫–ª—é—á–∞–µ—Ç 12 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –±–ª–æ–∫–æ–≤ –∏ 3 –Ω–∞—Ä—É–∂–Ω—ã—Ö –±–ª–æ–∫–∞ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.",
            "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 15",
            "images": [
                "https://images.pexels.com/photos/32497161/pexels-photo-32497161.jpeg",
                "https://images.pexels.com/photos/8297856/pexels-photo-8297856.jpeg",
                "https://images.pexels.com/photos/31462219/pexels-photo-31462219.jpeg"
            ]
        },
        {
            "title": "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞",
            "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º –≤ —Ç—Ä–µ—Ö—ç—Ç–∞–∂–Ω–æ–º —á–∞—Å—Ç–Ω–æ–º –¥–æ–º–µ. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 6 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –±–ª–æ–∫–æ–≤ —Ä–∞–∑–ª–∏—á–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è.",
            "address": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –û–¥–∏–Ω—Ü–æ–≤–æ",
            "images": [
                "https://images.pexels.com/photos/16592625/pexels-photo-16592625.jpeg",
                "https://images.pexels.com/photos/3964341/pexels-photo-3964341.jpeg",
                "https://images.unsplash.com/photo-1729183672500-46c52a897de5"
            ]
        },
        {
            "title": "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏",
            "description": "–ú–æ–Ω—Ç–∞–∂ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ –∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏. –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏—Ç–æ—á–Ω–æ-–≤—ã—Ç—è–∂–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–æ—â–Ω–æ—Å—Ç—å—é 10 –∫–í—Ç –∏ —Å–∏—Å—Ç–µ–º—É –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤.",
            "address": "–≥. –ú–æ—Å–∫–≤–∞, –í–∞—Ä—à–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥. 42",
            "images": [
                "https://images.pexels.com/photos/7937300/pexels-photo-7937300.jpeg",
                "https://images.unsplash.com/photo-1616185501655-b134ec9405f9",
                "https://images.pexels.com/photos/32588555/pexels-photo-32588555.jpeg"
            ]
        }
    ]
    
    for project_data in projects:
        project = Project(**project_data)
        await db.projects.insert_one(project.dict())
    
    return {"message": "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}

# Include the router in the main app
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()