import os
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional
import base64
import io
from PIL import Image
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel

# Load environment variables
load_dotenv()


# Configure logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Admin configuration
ADMIN_ID = 7470811680
BOT_TOKEN = os.environ.get('BOT_TOKEN')
MONGO_URL = os.environ.get('MONGO_URL')
DB_NAME = os.environ.get('DB_NAME')

# Initialize MongoDB connection
client = AsyncIOMotorClient(MONGO_URL)
db = client[DB_NAME]


class AdminState:
    """Manage admin session states"""
    def __init__(self):
        self.states: Dict[int, Dict[str, Any]] = {}
    
    def get_state(self, user_id: int) -> Dict[str, Any]:
        return self.states.get(user_id, {})
    
    def set_state(self, user_id: int, key: str, value: Any):
        if user_id not in self.states:
            self.states[user_id] = {}
        self.states[user_id][key] = value
    
    def clear_state(self, user_id: int):
        if user_id in self.states:
            del self.states[user_id]
    
    def get_action(self, user_id: int) -> Optional[str]:
        return self.get_state(user_id).get('action')
    
    def set_action(self, user_id: int, action: str):
        self.set_state(user_id, 'action', action)


# Global state manager
admin_state = AdminState()


async def check_admin(update: Update) -> bool:
    """Check if user is admin"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
        return False
    return True


def get_main_menu_keyboard():
    """Get main menu keyboard"""
    keyboard = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", web_app=WebAppInfo(url="https://54983115-be26-4c76-b596-72209d35aa19.preview.emergentagent.com"))],
        [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="manage_products")],
        [InlineKeyboardButton("üèóÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", callback_data="manage_projects")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_products_menu_keyboard():
    """Get products management keyboard"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_projects_menu_keyboard():
    """Get projects management keyboard"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="add_project")],
        [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="edit_project")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="delete_project")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="list_projects")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_back_keyboard():
    """Get back button keyboard"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    return InlineKeyboardMarkup(keyboard)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command handler"""
    if not await check_admin(update):
        return
    
    admin_state.clear_state(update.effective_user.id)
    
    welcome_text = """
üîß **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ö–õ–ò–ú–ê–¢ –¢–ï–•–ù–û**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–º –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤!

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–û –Ω–∞—Å"
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_menu_keyboard()
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button callbacks"""
    query = update.callback_query
    await query.answer()
    
    if not await check_admin_callback(query):
        return
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "main_menu":
        admin_state.clear_state(user_id)
        await query.edit_message_text(
            "üîß **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ö–õ–ò–ú–ê–¢ –¢–ï–•–ù–û**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_menu_keyboard()
        )
    
    elif data == "manage_products":
        await query.edit_message_text(
            "üì¶ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_products_menu_keyboard()
        )
    
    elif data == "manage_projects":
        await query.edit_message_text(
            "üèóÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_projects_menu_keyboard()
        )
    
    elif data == "add_product":
        admin_state.set_action(user_id, "add_product_name")
        admin_state.set_state(user_id, "new_product", {})
        await query.edit_message_text(
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞**\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "add_project":
        admin_state.set_action(user_id, "add_project_title")
        admin_state.set_state(user_id, "new_project", {})
        await query.edit_message_text(
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "list_products":
        await list_products(query)
    
    elif data == "list_projects":
        await list_projects(query)
    
    elif data == "edit_product":
        await show_products_for_edit(query)
    
    elif data == "edit_project":
        await show_projects_for_edit(query)
    
    elif data == "delete_product":
        await show_products_for_delete(query)
    
    elif data == "delete_project":
        await show_projects_for_delete(query)
    
    elif data.startswith("edit_product_"):
        product_id = data.replace("edit_product_", "")
        await start_product_edit(query, product_id)
    
    elif data.startswith("edit_project_"):
        project_id = data.replace("edit_project_", "")
        await start_project_edit(query, project_id)
    
    elif data.startswith("delete_product_"):
        product_id = data.replace("delete_product_", "")
        await delete_product(query, product_id)
    
    elif data.startswith("delete_project_"):
        project_id = data.replace("delete_project_", "")
        await delete_project(query, project_id)
    
    elif data == "statistics":
        await show_statistics(query)
    
    elif data == "finish_project":
        user_id = query.from_user.id
        await finish_project_creation(query, user_id)
    
    elif data == "continue_images":
        await query.edit_message_text(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "finish_project_images":
        user_id = query.from_user.id
        await finish_project_images_edit(query, user_id)
    
    elif data == "continue_project_images":
        await query.edit_message_text(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
            parse_mode=ParseMode.MARKDOWN
        )


async def check_admin_callback(query) -> bool:
    """Check if user is admin for callback"""
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", show_alert=True)
        return False
    return True


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages"""
    if not await check_admin(update):
        return
    
    user_id = update.effective_user.id
    action = admin_state.get_action(user_id)
    text = update.message.text
    
    if not action:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏",
            reply_markup=get_back_keyboard()
        )
        return
    
    # Handle product addition
    if action == "add_product_name":
        admin_state.set_state(user_id, "new_product", {"name": text})
        admin_state.set_action(user_id, "add_product_short_description")
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    
    elif action == "add_product_short_description":
        product_data = admin_state.get_state(user_id).get("new_product", {})
        product_data["short_description"] = text
        admin_state.set_state(user_id, "new_product", product_data)
        admin_state.set_action(user_id, "add_product_description")
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    
    elif action == "add_product_description":
        product_data = admin_state.get_state(user_id).get("new_product", {})
        product_data["description"] = text
        admin_state.set_state(user_id, "new_product", product_data)
        admin_state.set_action(user_id, "add_product_price")
        await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    
    elif action == "add_product_price":
        try:
            price = float(text)
            product_data = admin_state.get_state(user_id).get("new_product", {})
            product_data["price"] = price
            admin_state.set_state(user_id, "new_product", product_data)
            admin_state.set_action(user_id, "add_product_specifications")
            await update.message.reply_text(
                "‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞1: –ó–Ω–∞—á–µ–Ω–∏–µ1\n"
                "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞2: –ó–Ω–∞—á–µ–Ω–∏–µ2\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è: 3.5 –∫–í—Ç\n"
                "–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è: 35 –º¬≤"
            )
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)")
    
    elif action == "add_product_specifications":
        specifications = {}
        for line in text.split('\n'):
            if ':' in line:
                key, value = line.split(':', 1)
                specifications[key.strip()] = value.strip()
        
        product_data = admin_state.get_state(user_id).get("new_product", {})
        product_data["specifications"] = specifications
        admin_state.set_state(user_id, "new_product", product_data)
        admin_state.set_action(user_id, "add_product_image")
        await update.message.reply_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    
    # Handle project addition
    elif action == "add_project_title":
        admin_state.set_state(user_id, "new_project", {"title": text})
        admin_state.set_action(user_id, "add_project_description")
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    
    elif action == "add_project_description":
        project_data = admin_state.get_state(user_id).get("new_project", {})
        project_data["description"] = text
        admin_state.set_state(user_id, "new_project", project_data)
        admin_state.set_action(user_id, "add_project_address")
        await update.message.reply_text("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–µ–∫—Ç–∞:")
    
    elif action == "add_project_address":
        project_data = admin_state.get_state(user_id).get("new_project", {})
        project_data["address"] = text
        admin_state.set_state(user_id, "new_project", project_data)
        admin_state.set_action(user_id, "add_project_images")
        await update.message.reply_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):")


async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle photo uploads"""
    if not await check_admin(update):
        return
    
    user_id = update.effective_user.id
    action = admin_state.get_action(user_id)
    
    if action == "add_product_image":
        # Download photo
        photo = update.message.photo[-1]  # Get highest resolution
        file = await context.bot.get_file(photo.file_id)
        
        # Convert to base64
        photo_bytes = await file.download_as_bytearray()
        image_base64 = base64.b64encode(photo_bytes).decode('utf-8')
        
        # Save product
        product_data = admin_state.get_state(user_id).get("new_product", {})
        product_data["image_url"] = f"data:image/jpeg;base64,{image_base64}"
        product_data["created_at"] = datetime.utcnow()
        
        # Generate UUID for product
        import uuid
        product_data["id"] = str(uuid.uuid4())
        
        # Save to database
        await db.products.insert_one(product_data)
        
        admin_state.clear_state(user_id)
        await update.message.reply_text(
            f"‚úÖ –¢–æ–≤–∞—Ä '{product_data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_main_menu_keyboard()
        )
    
    elif action == "add_project_images":
        # Download photo
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        # Convert to base64
        photo_bytes = await file.download_as_bytearray()
        image_base64 = base64.b64encode(photo_bytes).decode('utf-8')
        
        # Add to project images
        project_data = admin_state.get_state(user_id).get("new_project", {})
        if "images" not in project_data:
            project_data["images"] = []
        project_data["images"].append(f"data:image/jpeg;base64,{image_base64}")
        admin_state.set_state(user_id, "new_project", project_data)
        
        # Ask for more images or finish
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_project")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="continue_images")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ: {len(project_data['images'])}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?",
            reply_markup=reply_markup
        )
    
    elif action.startswith("edit_product_image_"):
        # Download photo
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        # Convert to base64
        photo_bytes = await file.download_as_bytearray()
        image_base64 = base64.b64encode(photo_bytes).decode('utf-8')
        
        product_id = action.replace("edit_product_image_", "")
        await db.products.update_one(
            {"id": product_id}, 
            {"$set": {"image_url": f"data:image/jpeg;base64,{image_base64}"}}
        )
        admin_state.clear_state(user_id)
        await update.message.reply_text(
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=get_main_menu_keyboard()
        )
    
    elif action.startswith("edit_project_images_"):
        # Download photo
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        # Convert to base64
        photo_bytes = await file.download_as_bytearray()
        image_base64 = base64.b64encode(photo_bytes).decode('utf-8')
        
        # Add to new images list
        new_images = admin_state.get_state(user_id).get("new_project_images", [])
        new_images.append(f"data:image/jpeg;base64,{image_base64}")
        admin_state.set_state(user_id, "new_project_images", new_images)
        
        # Ask for more images or finish
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_project_images")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="continue_project_images")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ: {len(new_images)}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?",
            reply_markup=reply_markup
        )


async def list_products(query):
    """List all products"""
    products = await db.products.find().to_list(1000)
    
    if not products:
        await query.edit_message_text(
            "üì¶ **–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤**\n\n‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_back_keyboard()
        )
        return
    
    text = "üì¶ **–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:**\n\n"
    for i, product in enumerate(products, 1):
        text += f"{i}. **{product['name']}**\n"
        text += f"   üí∞ {product['price']:,.0f} ‚ÇΩ\n"
        text += f"   üìù {product['short_description']}\n\n"
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_back_keyboard()
    )


async def list_projects(query):
    """List all projects"""
    projects = await db.projects.find().to_list(1000)
    
    if not projects:
        await query.edit_message_text(
            "üèóÔ∏è **–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤**\n\n‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_back_keyboard()
        )
        return
    
    text = "üèóÔ∏è **–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:**\n\n"
    for i, project in enumerate(projects, 1):
        text += f"{i}. **{project['title']}**\n"
        text += f"   üìç {project['address']}\n"
        text += f"   üì∑ {len(project.get('images', []))} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_back_keyboard()
    )


async def show_products_for_edit(query):
    """Show products for editing"""
    products = await db.products.find().to_list(1000)
    
    if not products:
        await query.edit_message_text(
            "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=get_back_keyboard()
        )
        return
    
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            f"üìù {product['name']}", 
            callback_data=f"edit_product_{product['id']}"
        )])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_products")])
    
    await query.edit_message_text(
        "üìù **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_projects_for_edit(query):
    """Show projects for editing"""
    projects = await db.projects.find().to_list(1000)
    
    if not projects:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=get_back_keyboard()
        )
        return
    
    keyboard = []
    for project in projects:
        keyboard.append([InlineKeyboardButton(
            f"üìù {project['title']}", 
            callback_data=f"edit_project_{project['id']}"
        )])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_projects")])
    
    await query.edit_message_text(
        "üìù **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_products_for_delete(query):
    """Show products for deletion"""
    products = await db.products.find().to_list(1000)
    
    if not products:
        await query.edit_message_text(
            "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=get_back_keyboard()
        )
        return
    
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            f"üóëÔ∏è {product['name']}", 
            callback_data=f"delete_product_{product['id']}"
        )])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_products")])
    
    await query.edit_message_text(
        "üóëÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_projects_for_delete(query):
    """Show projects for deletion"""
    projects = await db.projects.find().to_list(1000)
    
    if not projects:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=get_back_keyboard()
        )
        return
    
    keyboard = []
    for project in projects:
        keyboard.append([InlineKeyboardButton(
            f"üóëÔ∏è {project['title']}", 
            callback_data=f"delete_project_{project['id']}"
        )])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_projects")])
    
    await query.edit_message_text(
        "üóëÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def delete_product(query, product_id: str):
    """Delete a product"""
    product = await db.products.find_one({"id": product_id})
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await db.products.delete_one({"id": product_id})
    await query.edit_message_text(
        f"‚úÖ –¢–æ–≤–∞—Ä '{product['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=get_main_menu_keyboard()
    )


async def delete_project(query, project_id: str):
    """Delete a project"""
    project = await db.projects.find_one({"id": project_id})
    if not project:
        await query.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await db.projects.delete_one({"id": project_id})
    await query.edit_message_text(
        f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project['title']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=get_main_menu_keyboard()
    )


async def show_statistics(query):
    """Show statistics"""
    products_count = await db.products.count_documents({})
    projects_count = await db.projects.count_documents({})
    orders_count = await db.orders.count_documents({})
    feedback_count = await db.feedback.count_documents({})
    
    text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üì¶ –¢–æ–≤–∞—Ä—ã: {products_count}
üèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã: {projects_count}
üõí –ó–∞–∫–∞–∑—ã: {orders_count}
üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {feedback_count}
    """
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_back_keyboard()
    )


async def finish_project_creation(query, user_id: int):
    """Finish creating a new project"""
    project_data = admin_state.get_state(user_id).get("new_project", {})
    
    if not project_data.get("images"):
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!",
            reply_markup=get_back_keyboard()
        )
        return
    
    # Generate UUID for project
    import uuid
    project_data["id"] = str(uuid.uuid4())
    project_data["created_at"] = datetime.utcnow()
    
    # Save to database
    await db.projects.insert_one(project_data)
    
    admin_state.clear_state(user_id)
    await query.edit_message_text(
        f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project_data['title']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=get_main_menu_keyboard()
    )


async def finish_project_images_edit(query, user_id: int):
    """Finish editing project images"""
    editing_project = admin_state.get_state(user_id).get("editing_project", {})
    new_images = admin_state.get_state(user_id).get("new_project_images", [])
    
    if not new_images:
        await query.edit_message_text(
            "‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!",
            reply_markup=get_back_keyboard()
        )
        return
    
    project_id = editing_project.get("id")
    if not project_id:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_back_keyboard()
        )
        return
    
    # Update project with new images
    await db.projects.update_one(
        {"id": project_id}, 
        {"$set": {"images": new_images}}
    )
    
    admin_state.clear_state(user_id)
    await query.edit_message_text(
        f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(new_images)}",
        reply_markup=get_main_menu_keyboard()
    )


async def start_product_edit(query, product_id: str):
    """Start editing a product"""
    user_id = query.from_user.id
    product = await db.products.find_one({"id": product_id})
    
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    admin_state.set_state(user_id, "editing_product", product)
    
    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_product_name_{product_id}")],
        [InlineKeyboardButton("üìÑ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_product_short_desc_{product_id}")],
        [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_product_desc_{product_id}")],
        [InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"edit_product_price_{product_id}")],
        [InlineKeyboardButton("‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", callback_data=f"edit_product_specs_{product_id}")],
        [InlineKeyboardButton("üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data=f"edit_product_image_{product_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_product")]
    ]
    
    text = f"""
üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**

**–ù–∞–∑–≤–∞–Ω–∏–µ:** {product['name']}
**–¶–µ–Ω–∞:** {product['price']:,.0f} ‚ÇΩ
**–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {product['short_description']}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
    """
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def start_project_edit(query, project_id: str):
    """Start editing a project"""
    user_id = query.from_user.id
    project = await db.projects.find_one({"id": project_id})
    
    if not project:
        await query.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    admin_state.set_state(user_id, "editing_project", project)
    
    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_project_title_{project_id}")],
        [InlineKeyboardButton("üìã –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_project_desc_{project_id}")],
        [InlineKeyboardButton("üìç –ê–¥—Ä–µ—Å", callback_data=f"edit_project_address_{project_id}")],
        [InlineKeyboardButton("üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data=f"edit_project_images_{project_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_project")]
    ]
    
    text = f"""
üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞**

**–ù–∞–∑–≤–∞–Ω–∏–µ:** {project['title']}
**–ê–¥—Ä–µ—Å:** {project['address']}
**–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** {len(project.get('images', []))}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
    """
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def main():
    """Start the bot"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    
    # Start the bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()