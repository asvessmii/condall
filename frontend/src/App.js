import React, { useState, useEffect } from 'react';
import './App.css';
import axios from 'axios';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

// Telegram Web App initialization
const initTelegramWebApp = () => {
  if (window.Telegram?.WebApp) {
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();
    tg.enableClosingConfirmation();
    
    // Set theme
    tg.setHeaderColor('#2196F3');
    tg.setBackgroundColor('#ffffff');
    
    console.log('Telegram Web App initialized');
    return tg;
  }
  return null;
};

// Get Telegram user data
const getTelegramUser = () => {
  if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
    return window.Telegram.WebApp.initDataUnsafe.user;
  }
  return null;
};

// Bottom Navigation Component
const BottomNavigation = ({ activeSection, setActiveSection, cartCount }) => {
  const menuItems = [
    { id: 'catalog', name: '–ö–∞—Ç–∞–ª–æ–≥', icon: 'üè™' },
    { id: 'about', name: '–û –Ω–∞—Å', icon: 'üìã' },
    { id: 'feedback', name: '–°–≤—è–∑—å', icon: 'üí¨' },
    { id: 'cart', name: '–ö–æ—Ä–∑–∏–Ω–∞', icon: 'üõí', badge: cartCount }
  ];

  return (
    <nav className="bottom-nav">
      <div className="bottom-nav-container">
        {menuItems.map(item => (
          <button
            key={item.id}
            onClick={() => setActiveSection(item.id)}
            className={`bottom-nav-item ${
              activeSection === item.id ? 'active' : ''
            }`}
          >
            <div className="bottom-nav-icon">
              <span className="icon">{item.icon}</span>
              {item.badge > 0 && (
                <span className="badge">{item.badge}</span>
              )}
            </div>
            <span className="bottom-nav-text">{item.name}</span>
          </button>
        ))}
      </div>
    </nav>
  );
};

// Header Component
const Header = ({ title = "–ö–õ–ò–ú–ê–¢ –¢–ï–•–ù–û" }) => {
  return (
    <header className="app-header">
      <div className="header-content">
        <h1 className="header-title">
          <span className="header-icon">‚ùÑÔ∏è</span>
          {title}
        </h1>
      </div>
    </header>
  );
};

// Product Card Component
const ProductCard = ({ product, onViewDetails, onAddToCart }) => {
  return (
    <div className="product-card">
      <div className="product-image-container">
        <img 
          src={product.image_url} 
          alt={product.name}
          className="product-image"
        />
      </div>
      <div className="product-info">
        <h3 className="product-name">{product.name}</h3>
        <p className="product-description">{product.short_description}</p>
        <div className="product-price">
          {product.price.toLocaleString()} ‚ÇΩ
        </div>
        <div className="product-actions">
          <button
            onClick={() => onViewDetails(product)}
            className="btn btn-secondary"
          >
            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
          </button>
          <button
            onClick={() => onAddToCart(product)}
            className="btn btn-primary"
          >
            –í –∫–æ—Ä–∑–∏–Ω—É
          </button>
        </div>
      </div>
    </div>
  );
};

// Product Details Modal
const ProductDetailsModal = ({ product, onClose, onAddToCart }) => {
  if (!product) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2 className="modal-title">{product.name}</h2>
          <button onClick={onClose} className="modal-close">√ó</button>
        </div>
        <div className="modal-content">
          <div className="product-detail-image">
            <img src={product.image_url} alt={product.name} />
          </div>
          <div className="product-detail-info">
            <p className="product-detail-description">{product.description}</p>
            <div className="product-detail-price">
              {product.price.toLocaleString()} ‚ÇΩ
            </div>
            <button
              onClick={() => {
                onAddToCart(product);
                onClose();
              }}
              className="btn btn-primary btn-large"
            >
              –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
            </button>
          </div>
          {product.specifications && Object.keys(product.specifications).length > 0 && (
            <div className="specifications">
              <h3 className="specifications-title">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
              <div className="specifications-list">
                {Object.entries(product.specifications).map(([key, value]) => (
                  <div key={key} className="specification-item">
                    <span className="spec-key">{key}</span>
                    <span className="spec-value">{value}</span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Filters Component
const ProductFilters = ({ products, filters, onFiltersChange, onReset }) => {
  const [showFilters, setShowFilters] = useState(false);

  // Extract unique values for filters
  const brands = [...new Set(products.map(p => {
    const brandMatch = p.name.match(/^([A-Za-z\s]+)/);
    return brandMatch ? brandMatch[1].trim() : '–î—Ä—É–≥–∏–µ';
  }))];

  const powerOptions = [...new Set(products.map(p => {
    const power = p.specifications?.['–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è'];
    return power ? power.replace(' –∫–í—Ç', '') : null;
  }).filter(Boolean))].sort((a, b) => parseFloat(a) - parseFloat(b));

  const areaOptions = [...new Set(products.map(p => {
    const area = p.specifications?.['–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è'];
    return area ? area.replace(' –º¬≤', '') : null;
  }).filter(Boolean))].sort((a, b) => parseInt(a) - parseInt(b));

  const efficiencyClasses = [...new Set(products.map(p => 
    p.specifications?.['–ö–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏']
  ).filter(Boolean))];

  const handleFilterChange = (key, value) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const handlePriceChange = (key, value) => {
    onFiltersChange({
      ...filters,
      priceRange: { ...filters.priceRange, [key]: value }
    });
  };

  const activeFiltersCount = Object.entries(filters).filter(([key, value]) => {
    if (key === 'priceRange') {
      return value.min || value.max;
    }
    return value && value.length > 0;
  }).length;

  return (
    <div className="filters-container">
      <div className="filters-header">
        <div className="search-container">
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤..."
            value={filters.search || ''}
            onChange={(e) => handleFilterChange('search', e.target.value)}
            className="search-input"
          />
          <span className="search-icon">üîç</span>
        </div>
        <button
          onClick={() => setShowFilters(!showFilters)}
          className={`filters-toggle ${activeFiltersCount > 0 ? 'has-filters' : ''}`}
        >
          <span>–§–∏–ª—å—Ç—Ä—ã</span>
          {activeFiltersCount > 0 && (
            <span className="filters-count">{activeFiltersCount}</span>
          )}
          <span className={`toggle-icon ${showFilters ? 'open' : ''}`}>‚ñº</span>
        </button>
      </div>

      {showFilters && (
        <div className="filters-panel">
          <div className="filters-grid">
            {/* Brand Filter */}
            <div className="filter-group">
              <label className="filter-label">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å</label>
              <select
                value={filters.brand || ''}
                onChange={(e) => handleFilterChange('brand', e.target.value)}
                className="filter-select"
              >
                <option value="">–í—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏</option>
                {brands.map(brand => (
                  <option key={brand} value={brand}>{brand}</option>
                ))}
              </select>
            </div>

            {/* Power Filter */}
            <div className="filter-group">
              <label className="filter-label">–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è</label>
              <select
                value={filters.power || ''}
                onChange={(e) => handleFilterChange('power', e.target.value)}
                className="filter-select"
              >
                <option value="">–õ—é–±–∞—è –º–æ—â–Ω–æ—Å—Ç—å</option>
                {powerOptions.map(power => (
                  <option key={power} value={power}>{power} –∫–í—Ç</option>
                ))}
              </select>
            </div>

            {/* Area Filter */}
            <div className="filter-group">
              <label className="filter-label">–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è</label>
              <select
                value={filters.area || ''}
                onChange={(e) => handleFilterChange('area', e.target.value)}
                className="filter-select"
              >
                <option value="">–õ—é–±–∞—è –ø–ª–æ—â–∞–¥—å</option>
                {areaOptions.map(area => (
                  <option key={area} value={area}>{area} –º¬≤</option>
                ))}
              </select>
            </div>

            {/* Efficiency Filter */}
            <div className="filter-group">
              <label className="filter-label">–ö–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</label>
              <select
                value={filters.efficiency || ''}
                onChange={(e) => handleFilterChange('efficiency', e.target.value)}
                className="filter-select"
              >
                <option value="">–õ—é–±–æ–π –∫–ª–∞—Å—Å</option>
                {efficiencyClasses.map(cls => (
                  <option key={cls} value={cls}>{cls}</option>
                ))}
              </select>
            </div>

            {/* Price Range Filter */}
            <div className="filter-group filter-group-wide">
              <label className="filter-label">–¶–µ–Ω–∞, ‚ÇΩ</label>
              <div className="price-range">
                <input
                  type="number"
                  placeholder="–û—Ç"
                  value={filters.priceRange?.min || ''}
                  onChange={(e) => handlePriceChange('min', e.target.value)}
                  className="price-input"
                />
                <span className="price-separator">‚Äî</span>
                <input
                  type="number"
                  placeholder="–î–æ"
                  value={filters.priceRange?.max || ''}
                  onChange={(e) => handlePriceChange('max', e.target.value)}
                  className="price-input"
                />
              </div>
            </div>
          </div>

          <div className="filters-actions">
            <button onClick={onReset} className="btn btn-secondary btn-small">
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// Catalog Section
const Catalog = ({ onAddToCart }) => {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    search: '',
    brand: '',
    power: '',
    area: '',
    efficiency: '',
    priceRange: { min: '', max: '' }
  });

  useEffect(() => {
    fetchProducts();
  }, []);

  useEffect(() => {
    applyFilters();
  }, [products, filters]);

  const fetchProducts = async () => {
    try {
      const response = await axios.get(`${API}/products`);
      setProducts(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  const applyFilters = () => {
    let filtered = [...products];

    // Search filter
    if (filters.search) {
      const searchTerm = filters.search.toLowerCase();
      filtered = filtered.filter(product =>
        product.name.toLowerCase().includes(searchTerm) ||
        product.description.toLowerCase().includes(searchTerm) ||
        product.short_description.toLowerCase().includes(searchTerm)
      );
    }

    // Brand filter
    if (filters.brand) {
      filtered = filtered.filter(product => {
        const brandMatch = product.name.match(/^([A-Za-z\s]+)/);
        const productBrand = brandMatch ? brandMatch[1].trim() : '–î—Ä—É–≥–∏–µ';
        return productBrand === filters.brand;
      });
    }

    // Power filter
    if (filters.power) {
      filtered = filtered.filter(product => {
        const power = product.specifications?.['–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è'];
        return power && power.includes(filters.power);
      });
    }

    // Area filter
    if (filters.area) {
      filtered = filtered.filter(product => {
        const area = product.specifications?.['–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è'];
        return area && area.includes(filters.area);
      });
    }

    // Efficiency filter
    if (filters.efficiency) {
      filtered = filtered.filter(product => {
        const efficiency = product.specifications?.['–ö–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'];
        return efficiency === filters.efficiency;
      });
    }

    // Price range filter
    if (filters.priceRange.min || filters.priceRange.max) {
      filtered = filtered.filter(product => {
        const price = product.price;
        const min = filters.priceRange.min ? parseFloat(filters.priceRange.min) : 0;
        const max = filters.priceRange.max ? parseFloat(filters.priceRange.max) : Infinity;
        return price >= min && price <= max;
      });
    }

    setFilteredProducts(filtered);
  };

  const handleFiltersChange = (newFilters) => {
    setFilters(newFilters);
  };

  const handleResetFilters = () => {
    setFilters({
      search: '',
      brand: '',
      power: '',
      area: '',
      efficiency: '',
      priceRange: { min: '', max: '' }
    });
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</p>
      </div>
    );
  }

  return (
    <div className="section">
      <div className="section-content">
        <ProductFilters
          products={products}
          filters={filters}
          onFiltersChange={handleFiltersChange}
          onReset={handleResetFilters}
        />
        
        <div className="products-header">
          <h2 className="products-title">
            {filteredProducts.length === products.length 
              ? `–í—Å–µ —Ç–æ–≤–∞—Ä—ã (${products.length})`
              : `–ù–∞–π–¥–µ–Ω–æ: ${filteredProducts.length} –∏–∑ ${products.length}`
            }
          </h2>
        </div>

        {filteredProducts.length === 0 ? (
          <div className="no-results">
            <div className="no-results-icon">üîç</div>
            <h3 className="no-results-title">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p className="no-results-text">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </p>
            <button onClick={handleResetFilters} className="btn btn-primary">
              –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          </div>
        ) : (
          <div className="products-grid">
            {filteredProducts.map(product => (
              <ProductCard
                key={product.id}
                product={product}
                onViewDetails={setSelectedProduct}
                onAddToCart={onAddToCart}
              />
            ))}
          </div>
        )}
      </div>
      <ProductDetailsModal
        product={selectedProduct}
        onClose={() => setSelectedProduct(null)}
        onAddToCart={onAddToCart}
      />
    </div>
  );
};

// About Section
const About = () => {
  const [projects, setProjects] = useState([]);
  const [currentProject, setCurrentProject] = useState(0);
  const [currentImage, setCurrentImage] = useState(0);

  useEffect(() => {
    fetchProjects();
  }, []);

  const fetchProjects = async () => {
    try {
      const response = await axios.get(`${API}/projects`);
      setProjects(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
    }
  };

  const nextImage = () => {
    if (projects[currentProject]) {
      setCurrentImage((prev) => 
        prev < projects[currentProject].images.length - 1 ? prev + 1 : 0
      );
    }
  };

  const prevImage = () => {
    if (projects[currentProject]) {
      setCurrentImage((prev) => 
        prev > 0 ? prev - 1 : projects[currentProject].images.length - 1
      );
    }
  };

  const nextProject = () => {
    setCurrentProject((prev) => prev < projects.length - 1 ? prev + 1 : 0);
    setCurrentImage(0);
  };

  const prevProject = () => {
    setCurrentProject((prev) => prev > 0 ? prev - 1 : projects.length - 1);
    setCurrentImage(0);
  };

  if (projects.length === 0) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...</p>
      </div>
    );
  }

  const project = projects[currentProject];

  return (
    <div className="section">
      <div className="section-content">
        <div className="project-card">
          <div className="project-gallery">
            <div className="gallery-container">
              <img 
                src={project.images[currentImage]} 
                alt={project.title}
                className="gallery-image"
              />
              {project.images.length > 1 && (
                <>
                  <button onClick={prevImage} className="gallery-nav gallery-prev">‚Äπ</button>
                  <button onClick={nextImage} className="gallery-nav gallery-next">‚Ä∫</button>
                  <div className="gallery-dots">
                    {project.images.map((_, index) => (
                      <button
                        key={index}
                        onClick={() => setCurrentImage(index)}
                        className={`gallery-dot ${index === currentImage ? 'active' : ''}`}
                      />
                    ))}
                  </div>
                </>
              )}
            </div>
          </div>
          
          <div className="project-info">
            <h2 className="project-title">{project.title}</h2>
            <p className="project-description">{project.description}</p>
            <div className="project-address">
              <span className="address-icon">üìç</span>
              <span>{project.address}</span>
            </div>
          </div>
        </div>
        
        {projects.length > 1 && (
          <div className="project-navigation">
            <button onClick={prevProject} className="btn btn-secondary">
              ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π
            </button>
            <span className="project-indicator">
              {currentProject + 1} –∏–∑ {projects.length}
            </span>
            <button onClick={nextProject} className="btn btn-secondary">
              –°–ª–µ–¥—É—é—â–∏–π ‚Üí
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

// Feedback Section
const Feedback = () => {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    message: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      await axios.post(`${API}/feedback`, formData);
      setFormData({ name: '', phone: '', message: '' });
      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 5000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="section">
      <div className="section-content">
        {showSuccess && (
          <div className="alert alert-success">
            <span className="alert-icon">‚úÖ</span>
            <span>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</span>
          </div>
        )}
        
        <div className="form-card">
          <h2 className="form-title">–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</h2>
          <form onSubmit={handleSubmit} className="contact-form">
            <div className="form-group">
              <label className="form-label">–í–∞—à–µ –∏–º—è</label>
              <input
                type="text"
                required
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="form-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
              />
            </div>
            
            <div className="form-group">
              <label className="form-label">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
              <input
                type="tel"
                required
                value={formData.phone}
                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                className="form-input"
                placeholder="+7 (000) 000-00-00"
              />
            </div>
            
            <div className="form-group">
              <label className="form-label">–°–æ–æ–±—â–µ–Ω–∏–µ</label>
              <textarea
                required
                rows="4"
                value={formData.message}
                onChange={(e) => setFormData({ ...formData, message: e.target.value })}
                className="form-input form-textarea"
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
              />
            </div>
            
            <button
              type="submit"
              disabled={isSubmitting}
              className="btn btn-primary btn-large"
            >
              {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
            </button>
          </form>
          
          <div className="contact-info">
            <div className="contact-item">
              <span className="contact-icon">üìû</span>
              <span>+7 (495) 123-45-67</span>
            </div>
            <div className="contact-item">
              <span className="contact-icon">üìß</span>
              <span>info@klimattehno.ru</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Cart Section
const Cart = ({ cartItems, onRemoveItem, onUpdateQuantity, onClearCart }) => {
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [isOrdering, setIsOrdering] = useState(false);

  const totalAmount = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);

  const handleOrder = async () => {
    setIsOrdering(true);
    try {
      await axios.post(`${API}/orders`, { items: cartItems });
      setShowConfirmation(false);
      onClearCart();
      alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsOrdering(false);
    }
  };

  if (cartItems.length === 0) {
    return (
      <div className="section">
        <div className="section-content">
          <div className="empty-cart">
            <div className="empty-cart-icon">üõí</div>
            <h2 className="empty-cart-title">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
            <p className="empty-cart-text">–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="section">
      <div className="section-content">
        <div className="cart-items">
          {cartItems.map(item => (
            <div key={item.id} className="cart-item">
              <div className="cart-item-info">
                <h3 className="cart-item-name">{item.product_name}</h3>
                <p className="cart-item-price">{item.price.toLocaleString()} ‚ÇΩ –∑–∞ —à—Ç.</p>
              </div>
              <div className="cart-item-controls">
                <div className="quantity-controls">
                  <button
                    onClick={() => onUpdateQuantity(item.id, Math.max(1, item.quantity - 1))}
                    className="quantity-btn"
                  >
                    ‚àí
                  </button>
                  <span className="quantity-value">{item.quantity}</span>
                  <button
                    onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}
                    className="quantity-btn"
                  >
                    +
                  </button>
                </div>
                <div className="cart-item-total">
                  {(item.price * item.quantity).toLocaleString()} ‚ÇΩ
                </div>
                <button
                  onClick={() => onRemoveItem(item.id)}
                  className="remove-btn"
                  title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
                >
                  üóëÔ∏è
                </button>
              </div>
            </div>
          ))}
        </div>
        
        <div className="cart-summary">
          <div className="cart-total">
            <span className="total-label">–ò—Ç–æ–≥–æ:</span>
            <span className="total-amount">{totalAmount.toLocaleString()} ‚ÇΩ</span>
          </div>
          <button
            onClick={() => setShowConfirmation(true)}
            className="btn btn-primary btn-large"
          >
            –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
          </button>
        </div>
      </div>

      {/* Order Confirmation Modal */}
      {showConfirmation && (
        <div className="modal-overlay" onClick={() => setShowConfirmation(false)}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2 className="modal-title">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
            </div>
            <div className="modal-content">
              <p className="confirmation-text">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {totalAmount.toLocaleString()} ‚ÇΩ?</p>
              
              <div className="order-items">
                {cartItems.map(item => (
                  <div key={item.id} className="order-item">
                    <span className="order-item-name">{item.product_name} √ó {item.quantity}</span>
                    <span className="order-item-price">{(item.price * item.quantity).toLocaleString()} ‚ÇΩ</span>
                  </div>
                ))}
              </div>
              
              <div className="modal-actions">
                <button
                  onClick={() => setShowConfirmation(false)}
                  className="btn btn-secondary"
                  disabled={isOrdering}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  onClick={handleOrder}
                  disabled={isOrdering}
                  className="btn btn-primary"
                >
                  {isOrdering ? '–û—Ñ–æ—Ä–º–ª—è–µ–º...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// Main App Component
function App() {
  const [activeSection, setActiveSection] = useState('catalog');
  const [cartItems, setCartItems] = useState([]);
  const [telegramWebApp, setTelegramWebApp] = useState(null);
  const [telegramUser, setTelegramUser] = useState(null);

  // Helper function to get user ID with fallback
  const getUserId = () => {
    return telegramUser?.id || 'guest_user';
  };

  useEffect(() => {
    // Initialize Telegram Web App
    const tg = initTelegramWebApp();
    setTelegramWebApp(tg);
    
    const user = getTelegramUser();
    setTelegramUser(user);
    
    console.log('Telegram User:', user);
    
    // initializeData(); // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  }, []);

  // Load cart items when telegramUser is available
  useEffect(() => {
    if (telegramUser !== null) {
      fetchCartItems();
    }
  }, [telegramUser]);

  const initializeData = async () => {
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é
    console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    return;
    try {
      await axios.post(`${API}/init-data`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  const fetchCartItems = async () => {
    try {
      const userId = getUserId();
      const response = await axios.get(`${API}/cart?user_id=${userId}`);
      setCartItems(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
    }
  };

  const handleAddToCart = async (product) => {
    try {
      const userId = getUserId();
      
      await axios.post(`${API}/cart`, {
        user_id: userId,
        product_id: product.id,
        quantity: 1
      });
      fetchCartItems();
      
      // –î–æ–±–∞–≤–ª—è–µ–º haptic feedback –¥–ª—è Telegram
      if (telegramWebApp?.HapticFeedback) {
        telegramWebApp.HapticFeedback.impactOccurred('light');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notification = document.createElement('div');
      notification.className = 'toast-notification';
      notification.textContent = '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!';
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.classList.add('show');
      }, 100);
      
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => document.body.removeChild(notification), 300);
      }, 2000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
      alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É');
    }
  };

  const handleRemoveFromCart = async (itemId) => {
    try {
      const userId = getUserId();
      await axios.delete(`${API}/cart/${itemId}?user_id=${userId}`);
      fetchCartItems();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', error);
    }
  };

  const handleUpdateQuantity = async (itemId, newQuantity) => {
    try {
      // Get user_id from telegram or use fallback
      const userId = telegramUser?.id || 'guest_user';
      
      const item = cartItems.find(item => item.id === itemId);
      if (item) {
        await axios.delete(`${API}/cart/${itemId}?user_id=${userId}`);
        if (newQuantity > 0) {
          await axios.post(`${API}/cart`, {
            user_id: userId,
            product_id: item.product_id,
            quantity: newQuantity
          });
        }
        fetchCartItems();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
    }
  };

  const handleClearCart = async () => {
    try {
      // Get user_id from telegram or use fallback
      const userId = telegramUser?.id || 'guest_user';
      await axios.delete(`${API}/cart?user_id=${userId}`);
      setCartItems([]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
    }
  };

  const renderSection = () => {
    switch (activeSection) {
      case 'catalog':
        return <Catalog onAddToCart={handleAddToCart} />;
      case 'about':
        return <About />;
      case 'feedback':
        return <Feedback />;
      case 'cart':
        return (
          <Cart 
            cartItems={cartItems}
            onRemoveItem={handleRemoveFromCart}
            onUpdateQuantity={handleUpdateQuantity}
            onClearCart={handleClearCart}
          />
        );
      default:
        return <Catalog onAddToCart={handleAddToCart} />;
    }
  };

  return (
    <div className="app">
      <Header />
      <main className="main-content">
        {renderSection()}
      </main>
      <BottomNavigation 
        activeSection={activeSection} 
        setActiveSection={setActiveSection}
        cartCount={cartItems.length}
      />
    </div>
  );
}

export default App;